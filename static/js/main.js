(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var mods = {
    refreshScreen: require('./refresh-screen'),
    submitVote: require('./submit-vote')
};

var _modules = _('[data-mod]');

if (_modules) {
    _modules.forEach(function (mod) {
        var name = mod.getAttribute('data-mod').split(/-/).reduce(function (sum, val) {
            return sum + (val.charAt(0).toUpperCase() + val.slice(1));
        }, '');

        mods[name.charAt(0).toLowerCase() + name.slice(1)](mod);
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfNGMyYjk4YmEuanMiXSwibmFtZXMiOlsibW9kcyIsInJlZnJlc2hTY3JlZW4iLCJyZXF1aXJlIiwic3VibWl0Vm90ZSIsIl9tb2R1bGVzIiwiXyIsImZvckVhY2giLCJtb2QiLCJuYW1lIiwiZ2V0QXR0cmlidXRlIiwic3BsaXQiLCJyZWR1Y2UiLCJzdW0iLCJ2YWwiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwidG9Mb3dlckNhc2UiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsT0FBTztBQUNUQyxtQkFBZUMsUUFBUSxrQkFBUixDQUROO0FBRVRDLGdCQUFZRCxRQUFRLGVBQVI7QUFGSCxDQUFiOztBQU1BLElBQU1FLFdBQVdDLEVBQUUsWUFBRixDQUFqQjs7QUFFQSxJQUFHRCxRQUFILEVBQWE7QUFDVEEsYUFBU0UsT0FBVCxDQUFpQixVQUFDQyxHQUFELEVBQVM7QUFDdEIsWUFBTUMsT0FBT0QsSUFBSUUsWUFBSixDQUFpQixVQUFqQixFQUE2QkMsS0FBN0IsQ0FBbUMsR0FBbkMsRUFBd0NDLE1BQXhDLENBQStDLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ3RFLG1CQUFPRCxPQUFPQyxJQUFJQyxNQUFKLENBQVcsQ0FBWCxFQUFjQyxXQUFkLEtBQThCRixJQUFJRyxLQUFKLENBQVUsQ0FBVixDQUFyQyxDQUFQO0FBQ0gsU0FGWSxFQUVWLEVBRlUsQ0FBYjs7QUFJQWhCLGFBQUtRLEtBQUtNLE1BQUwsQ0FBWSxDQUFaLEVBQWVHLFdBQWYsS0FBK0JULEtBQUtRLEtBQUwsQ0FBVyxDQUFYLENBQXBDLEVBQW1EVCxHQUFuRDtBQUNILEtBTkQ7QUFPSCIsImZpbGUiOiJmYWtlXzRjMmI5OGJhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9kcyA9IHtcbiAgICByZWZyZXNoU2NyZWVuOiByZXF1aXJlKCcuL3JlZnJlc2gtc2NyZWVuJyksXG4gICAgc3VibWl0Vm90ZTogcmVxdWlyZSgnLi9zdWJtaXQtdm90ZScpXG59O1xuXG5cbmNvbnN0IF9tb2R1bGVzID0gXygnW2RhdGEtbW9kXScpO1xuXG5pZihfbW9kdWxlcykge1xuICAgIF9tb2R1bGVzLmZvckVhY2goKG1vZCkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gbW9kLmdldEF0dHJpYnV0ZSgnZGF0YS1tb2QnKS5zcGxpdCgvLS8pLnJlZHVjZSgoc3VtLCB2YWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzdW0gKyAodmFsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsLnNsaWNlKDEpKTtcbiAgICAgICAgfSwgJycpO1xuXG4gICAgICAgIG1vZHNbbmFtZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIG5hbWUuc2xpY2UoMSldKG1vZCk7XG4gICAgfSk7XG59XG4iXX0=
},{"./refresh-screen":2,"./submit-vote":3}],2:[function(require,module,exports){
'use strict';

module.exports = function () {
    var _timer = _('.js-timer');

    _('.js-share-lesson')[0].addEventListener('click', function () {
        window.open(this.href, '_blank', 'height=450, width=650, left=20, location=no, top=20, titlebar=no, menubar=no');
    });

    function enableNextSection() {
        _(document.lessonControl).find('[type=submit]')[0].removeAttribute('disabled');
        _('.js-next-section').removeClass('hide');
    }

    function _update() {
        var timeElapsed = -(localStorage.getItem('startTime') - new Date().getTime());
        var seconds = ('0' + Math.floor(timeElapsed / 1000 % 60)).slice(-2);
        var minutes = ('0' + Math.floor(timeElapsed / 1000 / 60)).slice(-2);
        var hours = Math.floor(minutes / 60);
        hours = hours ? ('0' + hours + ':').slice(-2) : '';

        _timer[0].innerText = '' + hours + minutes + ':' + seconds;
        window.setInterval(_update, 1000);
    }

    setInterval(function () {
        $.get('/lesson/' + localStorage.getItem('lecturerLessonId') + '/update', function (data) {
            $('#participants').text(data.participants);

            if (data.participants) {
                if (!localStorage.getItem('startTime')) {
                    localStorage.setItem('startTime', new Date().getTime());
                }

                _update();

                if (data.participants === data.amount_bored) {
                    enableNextSection();
                }
            }
        });
    }, 1000);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZnJlc2gtc2NyZWVuLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJfdGltZXIiLCJfIiwiYWRkRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsIm9wZW4iLCJocmVmIiwiZW5hYmxlTmV4dFNlY3Rpb24iLCJkb2N1bWVudCIsImxlc3NvbkNvbnRyb2wiLCJmaW5kIiwicmVtb3ZlQXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJfdXBkYXRlIiwidGltZUVsYXBzZWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiRGF0ZSIsImdldFRpbWUiLCJzZWNvbmRzIiwiTWF0aCIsImZsb29yIiwic2xpY2UiLCJtaW51dGVzIiwiaG91cnMiLCJpbm5lclRleHQiLCJzZXRJbnRlcnZhbCIsIiQiLCJnZXQiLCJkYXRhIiwidGV4dCIsInBhcnRpY2lwYW50cyIsInNldEl0ZW0iLCJhbW91bnRfYm9yZWQiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsWUFBTTtBQUNuQixRQUFNQyxTQUFTQyxFQUFFLFdBQUYsQ0FBZjs7QUFFQUEsTUFBRSxrQkFBRixFQUFzQixDQUF0QixFQUNLQyxnQkFETCxDQUNzQixPQUR0QixFQUMrQixZQUFXO0FBQ2xDQyxlQUFPQyxJQUFQLENBQVksS0FBS0MsSUFBakIsRUFBdUIsUUFBdkIsRUFBaUMsOEVBQWpDO0FBQ0gsS0FITDs7QUFLQSxhQUFTQyxpQkFBVCxHQUE2QjtBQUN6QkwsVUFBRU0sU0FBU0MsYUFBWCxFQUEwQkMsSUFBMUIsQ0FBK0IsZUFBL0IsRUFBZ0QsQ0FBaEQsRUFBbURDLGVBQW5ELENBQW1FLFVBQW5FO0FBQ0FULFVBQUUsa0JBQUYsRUFBc0JVLFdBQXRCLENBQWtDLE1BQWxDO0FBQ0g7O0FBRUQsYUFBU0MsT0FBVCxHQUFtQjtBQUNmLFlBQU1DLGNBQWMsRUFBRUMsYUFBYUMsT0FBYixDQUFxQixXQUFyQixJQUFvQyxJQUFJQyxJQUFKLEdBQVdDLE9BQVgsRUFBdEMsQ0FBcEI7QUFDQSxZQUFNQyxVQUFVLE9BQUlDLEtBQUtDLEtBQUwsQ0FBWVAsY0FBYyxJQUFmLEdBQXVCLEVBQWxDLENBQUosRUFBNENRLEtBQTVDLENBQWtELENBQUMsQ0FBbkQsQ0FBaEI7QUFDQSxZQUFNQyxVQUFVLE9BQUlILEtBQUtDLEtBQUwsQ0FBWVAsY0FBYyxJQUFmLEdBQXVCLEVBQWxDLENBQUosRUFBNENRLEtBQTVDLENBQWtELENBQUMsQ0FBbkQsQ0FBaEI7QUFDQSxZQUFJRSxRQUFRSixLQUFLQyxLQUFMLENBQVdFLFVBQVUsRUFBckIsQ0FBWjtBQUNBQyxnQkFBUUEsUUFBUSxPQUFJQSxLQUFKLFFBQWFGLEtBQWIsQ0FBbUIsQ0FBQyxDQUFwQixDQUFSLEdBQWlDLEVBQXpDOztBQUVBckIsZUFBTyxDQUFQLEVBQVV3QixTQUFWLFFBQXlCRCxLQUF6QixHQUFpQ0QsT0FBakMsU0FBNENKLE9BQTVDO0FBQ0FmLGVBQU9zQixXQUFQLENBQW1CYixPQUFuQixFQUE0QixJQUE1QjtBQUNIOztBQUVEYSxnQkFBWSxZQUFNO0FBQ2RDLFVBQUVDLEdBQUYsY0FBaUJiLGFBQWFDLE9BQWIsQ0FBcUIsa0JBQXJCLENBQWpCLGNBQW9FLFVBQUNhLElBQUQsRUFBVTtBQUMxRUYsY0FBRSxlQUFGLEVBQW1CRyxJQUFuQixDQUF3QkQsS0FBS0UsWUFBN0I7O0FBRUEsZ0JBQUdGLEtBQUtFLFlBQVIsRUFBc0I7QUFDbEIsb0JBQUcsQ0FBQ2hCLGFBQWFDLE9BQWIsQ0FBcUIsV0FBckIsQ0FBSixFQUF1QztBQUNuQ0QsaUNBQWFpQixPQUFiLENBQXFCLFdBQXJCLEVBQWtDLElBQUlmLElBQUosR0FBV0MsT0FBWCxFQUFsQztBQUNIOztBQUVETDs7QUFFQSxvQkFBR2dCLEtBQUtFLFlBQUwsS0FBc0JGLEtBQUtJLFlBQTlCLEVBQTRDO0FBQ3hDMUI7QUFDSDtBQUNKO0FBQ0osU0FkRDtBQWVILEtBaEJELEVBZ0JHLElBaEJIO0FBaUJILENBekNEIiwiZmlsZSI6InJlZnJlc2gtc2NyZWVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gICAgY29uc3QgX3RpbWVyID0gXygnLmpzLXRpbWVyJyk7XG5cbiAgICBfKCcuanMtc2hhcmUtbGVzc29uJylbMF1cbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cub3Blbih0aGlzLmhyZWYsICdfYmxhbmsnLCAnaGVpZ2h0PTQ1MCwgd2lkdGg9NjUwLCBsZWZ0PTIwLCBsb2NhdGlvbj1ubywgdG9wPTIwLCB0aXRsZWJhcj1ubywgbWVudWJhcj1ubycpO1xuICAgICAgICB9KTsgIFxuXG4gICAgZnVuY3Rpb24gZW5hYmxlTmV4dFNlY3Rpb24oKSB7XG4gICAgICAgIF8oZG9jdW1lbnQubGVzc29uQ29udHJvbCkuZmluZCgnW3R5cGU9c3VibWl0XScpWzBdLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgXygnLmpzLW5leHQtc2VjdGlvbicpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3VwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgdGltZUVsYXBzZWQgPSAtKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzdGFydFRpbWUnKSAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICAgICAgY29uc3Qgc2Vjb25kcyA9IGAwJHtNYXRoLmZsb29yKCh0aW1lRWxhcHNlZCAvIDEwMDApICUgNjApfWAuc2xpY2UoLTIpO1xuICAgICAgICBjb25zdCBtaW51dGVzID0gYDAke01hdGguZmxvb3IoKHRpbWVFbGFwc2VkIC8gMTAwMCkgLyA2MCl9YC5zbGljZSgtMik7XG4gICAgICAgIGxldCBob3VycyA9IE1hdGguZmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgaG91cnMgPSBob3VycyA/IGAwJHtob3Vyc306YC5zbGljZSgtMikgOiAnJztcblxuICAgICAgICBfdGltZXJbMF0uaW5uZXJUZXh0ID0gYCR7aG91cnN9JHttaW51dGVzfToke3NlY29uZHN9YDtcbiAgICAgICAgd2luZG93LnNldEludGVydmFsKF91cGRhdGUsIDEwMDApO1xuICAgIH1cblxuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgJC5nZXQoYC9sZXNzb24vJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGVjdHVyZXJMZXNzb25JZCcpfS91cGRhdGVgLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgJCgnI3BhcnRpY2lwYW50cycpLnRleHQoZGF0YS5wYXJ0aWNpcGFudHMpO1xuXG4gICAgICAgICAgICBpZihkYXRhLnBhcnRpY2lwYW50cykge1xuICAgICAgICAgICAgICAgIGlmKCFsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc3RhcnRUaW1lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3N0YXJ0VGltZScsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfdXBkYXRlKCk7XG5cbiAgICAgICAgICAgICAgICBpZihkYXRhLnBhcnRpY2lwYW50cyA9PT0gZGF0YS5hbW91bnRfYm9yZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlTmV4dFNlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIDEwMDApO1xufTtcbiJdfQ==
},{}],3:[function(require,module,exports){
'use strict';

module.exports = function (mod) {
    var _voteBored = _(mod);
    var _votedMessage = _('.js-voted-message');
    var participantId = localStorage.getItem('participantId') ? '/' + localStorage.getItem('participantId') : '';

    function pollSection() {
        setInterval(function () {
            $.get('/vote/' + localStorage.getItem('studentLessonId') + '/update', function (data) {
                if (data['lessonEnded']) {
                    window.location = '/lesson/ended';
                } else {
                    if (data['sectionNumber'] !== parseInt(localStorage.getItem('sectionNumber'))) {
                        localStorage.setItem('sectionNumber', data['sectionNumber']);
                        _votedMessage.addClass('hide');
                        _voteBored.removeClass('voting--disabled');
                    }
                }
            });
        }, 1000);
    }

    $.get('/addparticipant/' + localStorage.getItem('studentLessonId') + participantId, function (data) {
        localStorage.setItem('participantId', data['participantId']);

        pollSection();

        _voteBored.find('.vote-section__links').forEach(function (link) {
            link.addEventListener('click', function (e) {
                e.preventDefault();

                if (!_voteBored.hasClass('voting--disabled')) {
                    var _link = _(e.currentTarget);

                    $.get(_link[0].href, function (data) {
                        if (data.success) {
                            _votedMessage.removeClass('hide');
                            _voteBored.addClass('voting--disabled');
                        }
                    });
                }
            });
        });
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1Ym1pdC12b3RlLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtb2QiLCJfdm90ZUJvcmVkIiwiXyIsIl92b3RlZE1lc3NhZ2UiLCJwYXJ0aWNpcGFudElkIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInBvbGxTZWN0aW9uIiwic2V0SW50ZXJ2YWwiLCIkIiwiZ2V0IiwiZGF0YSIsIndpbmRvdyIsImxvY2F0aW9uIiwicGFyc2VJbnQiLCJzZXRJdGVtIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImZpbmQiLCJmb3JFYWNoIiwibGluayIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicHJldmVudERlZmF1bHQiLCJoYXNDbGFzcyIsIl9saW5rIiwiY3VycmVudFRhcmdldCIsImhyZWYiLCJzdWNjZXNzIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCLFVBQUNDLEdBQUQsRUFBUztBQUN0QixRQUFNQyxhQUFhQyxFQUFFRixHQUFGLENBQW5CO0FBQ0EsUUFBTUcsZ0JBQWdCRCxFQUFFLG1CQUFGLENBQXRCO0FBQ0EsUUFBTUUsZ0JBQWdCQyxhQUFhQyxPQUFiLENBQXFCLGVBQXJCLFVBQ1JELGFBQWFDLE9BQWIsQ0FBcUIsZUFBckIsQ0FEUSxHQUVaLEVBRlY7O0FBSUEsYUFBU0MsV0FBVCxHQUF1QjtBQUNuQkMsb0JBQVksWUFBTTtBQUNkQyxjQUFFQyxHQUFGLFlBQWVMLGFBQWFDLE9BQWIsQ0FBcUIsaUJBQXJCLENBQWYsY0FBaUUsVUFBQ0ssSUFBRCxFQUFVO0FBQ3ZFLG9CQUFHQSxLQUFLLGFBQUwsQ0FBSCxFQUF3QjtBQUNwQkMsMkJBQU9DLFFBQVA7QUFDSCxpQkFGRCxNQUVPO0FBQ0gsd0JBQUdGLEtBQUssZUFBTCxNQUEwQkcsU0FBU1QsYUFBYUMsT0FBYixDQUFxQixlQUFyQixDQUFULENBQTdCLEVBQThFO0FBQzFFRCxxQ0FBYVUsT0FBYixDQUFxQixlQUFyQixFQUFzQ0osS0FBSyxlQUFMLENBQXRDO0FBQ0FSLHNDQUFjYSxRQUFkLENBQXVCLE1BQXZCO0FBQ0FmLG1DQUFXZ0IsV0FBWCxDQUF1QixrQkFBdkI7QUFDSDtBQUNKO0FBQ0osYUFWRDtBQVdILFNBWkQsRUFZRyxJQVpIO0FBYUg7O0FBR0RSLE1BQUVDLEdBQUYsc0JBQXlCTCxhQUFhQyxPQUFiLENBQXFCLGlCQUFyQixDQUF6QixHQUFtRUYsYUFBbkUsRUFBb0YsVUFBQ08sSUFBRCxFQUFVO0FBQzFGTixxQkFBYVUsT0FBYixDQUFxQixlQUFyQixFQUFzQ0osS0FBSyxlQUFMLENBQXRDOztBQUVBSjs7QUFFQU4sbUJBQVdpQixJQUFYLENBQWdCLHNCQUFoQixFQUF3Q0MsT0FBeEMsQ0FBZ0QsVUFBQ0MsSUFBRCxFQUFVO0FBQ3REQSxpQkFBS0MsZ0JBQUwsQ0FBc0IsT0FBdEIsRUFBK0IsVUFBU0MsQ0FBVCxFQUFZO0FBQ3ZDQSxrQkFBRUMsY0FBRjs7QUFFQSxvQkFBRyxDQUFDdEIsV0FBV3VCLFFBQVgsQ0FBb0Isa0JBQXBCLENBQUosRUFBNkM7QUFDekMsd0JBQU1DLFFBQVF2QixFQUFFb0IsRUFBRUksYUFBSixDQUFkOztBQUVBakIsc0JBQUVDLEdBQUYsQ0FBTWUsTUFBTSxDQUFOLEVBQVNFLElBQWYsRUFBcUIsVUFBQ2hCLElBQUQsRUFBVTtBQUMzQiw0QkFBSUEsS0FBS2lCLE9BQVQsRUFBa0I7QUFDZHpCLDBDQUFjYyxXQUFkLENBQTBCLE1BQTFCO0FBQ0FoQix1Q0FBV2UsUUFBWCxDQUFvQixrQkFBcEI7QUFDSDtBQUNKLHFCQUxEO0FBTUg7QUFDSixhQWJEO0FBY0gsU0FmRDtBQWdCSCxLQXJCRDtBQXNCSCxDQTlDRCIsImZpbGUiOiJzdWJtaXQtdm90ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKG1vZCkgPT4ge1xuICAgIGNvbnN0IF92b3RlQm9yZWQgPSBfKG1vZCk7XG4gICAgY29uc3QgX3ZvdGVkTWVzc2FnZSA9IF8oJy5qcy12b3RlZC1tZXNzYWdlJyk7XG4gICAgY29uc3QgcGFydGljaXBhbnRJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwYXJ0aWNpcGFudElkJykgXG4gICAgICAgICAgICA/IGAvJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGFydGljaXBhbnRJZCcpfWBcbiAgICAgICAgICAgIDogJyc7XG5cbiAgICBmdW5jdGlvbiBwb2xsU2VjdGlvbigpIHtcbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgJC5nZXQoYC92b3RlLyR7bG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3N0dWRlbnRMZXNzb25JZCcpfS91cGRhdGVgLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGRhdGFbJ2xlc3NvbkVuZGVkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gYC9sZXNzb24vZW5kZWRgO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGFbJ3NlY3Rpb25OdW1iZXInXSAhPT0gcGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlY3Rpb25OdW1iZXInKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZWN0aW9uTnVtYmVyJywgZGF0YVsnc2VjdGlvbk51bWJlciddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF92b3RlZE1lc3NhZ2UuYWRkQ2xhc3MoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF92b3RlQm9yZWQucmVtb3ZlQ2xhc3MoJ3ZvdGluZy0tZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG5cblxuICAgICQuZ2V0KGAvYWRkcGFydGljaXBhbnQvJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc3R1ZGVudExlc3NvbklkJyl9JHtwYXJ0aWNpcGFudElkfWAsIChkYXRhKSA9PiB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwYXJ0aWNpcGFudElkJywgZGF0YVsncGFydGljaXBhbnRJZCddKTtcblxuICAgICAgICBwb2xsU2VjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgX3ZvdGVCb3JlZC5maW5kKCcudm90ZS1zZWN0aW9uX19saW5rcycpLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgaWYoIV92b3RlQm9yZWQuaGFzQ2xhc3MoJ3ZvdGluZy0tZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBfbGluayA9IF8oZS5jdXJyZW50VGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAkLmdldChfbGlua1swXS5ocmVmLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92b3RlZE1lc3NhZ2UucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm90ZUJvcmVkLmFkZENsYXNzKCd2b3RpbmctLWRpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4iXX0=
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
